{-# LANGUAGE StandaloneDeriving #-}
module Data.Text.Index where


import           Data.Foldable   (foldMap,for_)
import           Data.Functor    ((<$>))
import           Data.List       (foldl')
import           Data.Monoid     (Endo(Endo,appEndo))
import           Data.Ord        (Down(Down))
import qualified Data.OrdPSQ             as PSQ
import qualified Data.Text               as Text
import           Data.Text       (Text)
import qualified Data.Text.ICU           as ICU
import qualified Data.Text.ICU.Char      as ICU
import qualified Data.Text.ICU.Normalize as ICU
import qualified Data.TST                as TST
import           Data.TST        (TST)
import           GHC.Generics    (Generic)
import           Prelude hiding (lookup,words)


type Index id
  = TST Char (Entries id)

type Entries id
  = PSQ.OrdPSQ id (Down Weight) Word

type Weight
  = Double

lookupExact :: (Ord id) => Int -> Word -> Index id -> [(id,Down Weight,Word)]
lookupExact n t index = case TST.lookup (realChars t) index of
  Just entries -> PSQ.takeMin n entries
  Nothing      -> []

lookup :: (Ord id) => Int -> Word -> Index id -> [(id,Weight,Word)]
lookup n t index = map (\ (i,Down w,t') -> (i,w,t')) .
  PSQ.takeMin n . psqUnions $ map f variations
 where
  f (t',w) = PSQ.fromList $ map (\ (i,Down w',t'') -> (i,Down $ w + w',t'')) $ lookupExact n t' index
  variations = vary defaultWeights $ normalise t

psqUnions :: (Ord k,Ord p) => [PSQ.OrdPSQ k p v] -> PSQ.OrdPSQ k p v
psqUnions = foldl' psqUnion PSQ.empty where
  psqUnion big small = foldl'
    (\ psq (k,p,v) -> PSQ.insertWith combine k p v psq)
    big
    $ PSQ.toList small
  combine _ (p₁,v₁) (p₂,v₂)
    | p₁ <= p₂  = (p₁,v₁)
    | otherwise = (p₂,v₂)

type Word
  = Text

empty :: Index id
empty = TST.empty

addVariant :: (Ord id) => id -> Word -> (Word,Weight) -> Index id -> Index id
addVariant i original (variant,w) = TST.insertWith
  (const $ PSQ.insert i (Down w) original)
  (realChars variant)
  (PSQ.singleton i (Down w) original)

addWord :: (Ord id) => id -> Word -> Index id -> Index id
addWord i t = appEndo . foldMap (Endo . addVariant i t) $
  vary defaultWeights t

addDocument :: (Ord id) => id -> Text -> Index id -> Index id
addDocument i = appEndo . foldMap (Endo . addWord i) . words

removeDocument :: (Ord id) => id -> Index id -> Index id
removeDocument i = fmap (PSQ.delete i)

words :: Text -> [Text]
words = map ICU.brkBreak .
  filter ((/=) ICU.Uncategorized . ICU.brkStatus) .
  ICU.breaks (ICU.breakWord ICU.Current)

normalise :: Text -> Text
normalise = ICU.normalize ICU.NFKD . Text.toCaseFold

-- We want to enumerate all versions of the given word with holes (deletions)
-- that can be created from the original via some ordered set of deletions
-- that falls within the budget.
-- Moreover, we want to generate every variation only once, and with the highest
-- possible remaining budget.
-- We do this in two steps:
-- · firstly, add holes only to the right of all existing holes, but not in
-- the right-most position;
-- · secondly, add holes in a continuous segment starting from the right-most
-- position, but not adjacent to existing holes on the left.
vary :: Weights -> Word -> [(Word,Weight)]
vary wts t = step2 =<< step1 (normalised,budget wts weightedLength) where
  normalised = normalise t
  weightedLength = sum . map (character wts) . Text.unpack $ normalised
  
  step1,step2 :: (Word,Weight) -> [(Word,Weight)]
  step1 (t,w) = go t w 1 where
    go t w start
      | w < 0       = []
      | Text.null t = [(t,w)]
      | otherwise   = (t,w) : concatMap
          (delete w)
          [(i,Text.splitAt i t) | i <- [start .. pred (Text.length t)]]
    delete w (i,(leftC,right)) = go
      (Text.append left (Text.cons hole right))
      (w - cost)
      (succ i)
     where
      c = Text.last leftC
      left = Text.init leftC
      cost = positionCost * continuationCost * characterCost
      positionCost
        | Text.all (== hole) left  = start wts
        | otherwise                = interior wts
      continuationCost
        | not (Text.null left) && Text.last left == hole = continuation wts
        | otherwise                                      = 1
      characterCost = character wts c
  step2 (t,w) = go t w (Text.length t) where
    go t w i
      | w < 0     = []
      | otherwise = (t,w) : case () of
        _ | i <= 0                                 -> []
          | i >= 2 && Text.index t (i - 2) == hole -> []
          | otherwise                              -> delete w (i,Text.splitAt i t)
    delete w (i,(leftC,right)) = go
      (Text.append left (Text.cons hole right))
      (w - cost)
      (pred i)
     where
      c = Text.last leftC
      left = Text.init leftC
      cost = positionCost * continuationCost * characterCost
      positionCost = end wts
      continuationCost
        | Text.null right = 1
        | otherwise       = continuation wts
      characterCost = character wts c

data Weights
  = Weights
    { start        :: Weight
    , interior     :: Weight
    , end          :: Weight
    , continuation :: Weight
    , character    :: Char -> Weight
    , budget       :: Weight -> Weight
    }

defaultWeights :: Weights
defaultWeights = Weights
  { start        = 0.25
  , interior     = 1
  , end          = 0.25
  , continuation = 0.75
  , character    = \ c -> case ICU.property ICU.GeneralCategory c of
      ICU.NonSpacingMark       -> 0.2
      ICU.EnclosingMark        -> 0.2
      ICU.CombiningSpacingMark -> 0.2
      ICU.OtherPunctuation     -> 0.4
      _                        -> 1
  , budget = \ l -> 0.15 + l / 10
--   , budget = \ l -> 0.34 + l ** 0.7 / 4
  }

hole :: Char
hole = '\xFFFC'

showHoles :: Text -> Text
showHoles = Text.map (\ c -> if c == hole then '□' else c)

realChars :: Text -> [Char]
realChars = filter (/= hole) . Text.unpack

printVariations :: Text -> IO ()
printVariations t = for_ (vary defaultWeights t) $
  \ (t,w) -> putStr (Text.unpack . showHoles $ t) >> putStrLn (" " ++ show w)

testDocument :: Text
testDocument = Text.pack "Dit is een hele zin, met allemaal woorden erin. Ook woorden met accent, als café. Daarnaast wat cijfers: 0 123 4.567. En natuurlijk symbolen ☺☹!"

dr :: Text
dr = Text.pack "driehoeksongelijkheid"
